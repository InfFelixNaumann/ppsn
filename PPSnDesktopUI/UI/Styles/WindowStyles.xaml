<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	                xmlns:ui="clr-namespace:TecWare.PPSn.UI">

    <Color x:Key="PPSnBlackColor">#000</Color>
    <Color x:Key="PPSnDesktopColor">#3B4A62</Color>
    <Color x:Key="PPSnAccentColor">#FFF</Color>
    <Color x:Key="PPSnAccentColor1">#F7E51D</Color>
    <Color x:Key="PPSnButtonMouseOverColor">#1F6588</Color>
    <Color x:Key="PPSnButtonPressedColor">#333333</Color>
    <Color x:Key="PPSnControlBackgroundColor">#FFF</Color>

    <Color x:Key="PPSnWindowActiveGlowColor">#007ACC</Color>
    <Color x:Key="PPSnWindowInActiveGlowColor">#60728C</Color>

    <SolidColorBrush x:Key="PPSnWindowBackgroundBrush" Color="{StaticResource PPSnDesktopColor}" />
    <SolidColorBrush x:Key="PPSnWindowForegroundBrush" Color="{StaticResource PPSnAccentColor}" />
    <SolidColorBrush x:Key="PPSnSeparatorBrush" Color="{StaticResource PPSnAccentColor}" Opacity=".5"/>
    <SolidColorBrush x:Key="PPSnAlternation0Brush" Color="{StaticResource PPSnAccentColor}" Opacity=".175"/>
    <SolidColorBrush x:Key="PPSnAlternation1Brush" Color="{StaticResource PPSnAccentColor}" Opacity=".098"/>
    <SolidColorBrush x:Key="PPSnMarkerBrush" Color="{StaticResource PPSnAccentColor1}"/>
    <SolidColorBrush x:Key="PPSnButtonMouseOverBrush" Color="{StaticResource PPSnButtonMouseOverColor}"/>
    <SolidColorBrush x:Key="PPSnButtonPressedBrush" Color="{StaticResource PPSnButtonPressedColor}"/>
	<SolidColorBrush x:Key="PPSnWindowFooterBrush" Color="#007ACC" />
    <SolidColorBrush x:Key="PPSnControlBackgroundBrush" Color="{StaticResource PPSnControlBackgroundColor}"/>

	<Style x:Key="PpsToolBarButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource PPSnWindowForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="PART_Border" Value="{StaticResource PPSnButtonMouseOverBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="PART_Border" Value="{StaticResource PPSnButtonPressedBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.4"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PpsWindow" TargetType="{x:Type ui:PpsWindow}">
		<Setter Property="WindowStyle" Value="SingleBorderWindow"/>
		<Setter Property="ResizeMode" Value="CanResize"/>
		<Setter Property="ActiveGlowColor" Value="{StaticResource PPSnWindowActiveGlowColor}"/>
		<Setter Property="InactiveGlowColor" Value="{StaticResource PPSnWindowInActiveGlowColor}"/>
	</Style>

    <Style x:Key="PpsTreeExpanderButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Border Width="9" Height="9" BorderThickness="1" BorderBrush="#FF7898B5" CornerRadius="1" SnapsToDevicePixels="true">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="White" Offset=".2"/>
                                        <GradientStop Color="#FFC0B7A6" Offset="1"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath"
									  Margin="1,1,1,1"
									  Fill="Black"
									  Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3  L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="PpsContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" Background="White"  BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Blue" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--<Style x:Key="PpsMenuItem" TargetType="{x:Type MenuItem}">
    <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
                <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                            <ColumnDefinition x:Name="Col3" Width="14"/>
                        </Grid.ColumnDefinitions>

                        --><!-- ContentPresenter to show an Icon if needed --><!--
                        <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                        --><!-- Glyph is a checkmark if needed for a checkable menu --><!--
                        <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                            <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                        </Grid>

                        --><!-- Content for the menu text etc --><!--
                        <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                        --><!-- Content for the menu IGT --><!--
                        <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                        --><!-- Arrow drawn path which points to the next level of the menu --><!--
                        <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                            <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                        </Grid>

                        --><!-- The Popup is the body of the menu which expands down or across depending on the level of the item --><!--
                        <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                                <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                    --><!-- StackPanel holds children of the menu. This is set by IsItemsHost=True --><!--
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                </Border>

                --><!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role --><!--
                <ControlTemplate.Triggers>
                    --><!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down --><!--
                    <Trigger Property="Role" Value="TopLevelHeader">
                        <Setter Property="Padding" Value="6,1,6,1"/>
                        <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                        <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                        <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                    </Trigger>

                    --><!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items--><!--
                    <Trigger Property="Role" Value="TopLevelItem">
                        <Setter Property="Padding" Value="6,1,6,1"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                    </Trigger>

                    --><!-- Role = SubMenuHeader : this is a child menu item which does not have children --><!--
                    <Trigger Property="Role" Value="SubmenuHeader">
                        <Setter Property="DockPanel.Dock" Value="Top"/>
                        <Setter Property="Padding" Value="0,2,0,2"/>
                    </Trigger>

                    --><!-- Role = SubMenuItem : this is a child menu item which has children--><!--
                    <Trigger Property="Role" Value="SubmenuItem">
                        <Setter Property="DockPanel.Dock" Value="Top"/>
                        <Setter Property="Padding" Value="0,2,0,2"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                    </Trigger>
                    <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                        <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                    </Trigger>

                    --><!-- If no Icon is present the we collapse the Icon Content --><!--
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                    </Trigger>

                    --><!-- The GlyphPanel contains the CheckMark --><!--
                    <Trigger Property="IsChecked" Value="true">
                        <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                    </Trigger>

                    --><!-- Using the system colors for the Menu Highlight and IsEnabled--><!--
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" Value="LightGray" TargetName="Border"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="LightGray"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style>-->

</ResourceDictionary>